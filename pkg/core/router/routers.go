/*
 * Trissect Goal Service
 *
 * Handles CRUD operations on Goal resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package router

import (
	"fmt"
	"net/http"

	"github.com/tuuturu/trissect-goal-service/pkg/core"
	"github.com/tuuturu/trissect-goal-service/pkg/storage/upper"

	"github.com/tuuturu/trissect-goal-service/pkg/core/api"

	"github.com/gin-gonic/gin"
)

// NewRouter returns a new router.
func NewRouter(cfg core.Config) *gin.Engine {
	router := gin.Default()

	var storage core.StorageClient

	switch cfg.DSN.Scheme {
	case "postgresql":
		storage = upper.NewClient(cfg.DSN)
	default:
		panic(fmt.Sprintf("Unsupported database scheme %s", cfg.DSN.Scheme))
	}

	err := storage.Open()
	if err != nil {
		panic("unable to open database")
	}

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFuncGenerator(storage))
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFuncGenerator(storage))
		}
	}

	return router
}

// Index is the index handler.
func Index(_ core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.String(http.StatusOK, "Hello World!")
	}
}

var routes = core.Routes{
	{
		Name:                 "Index",
		Method:               http.MethodGet,
		Pattern:              "/",
		HandlerFuncGenerator: Index,
	},

	{
		Name:                 "AddGoal",
		Method:               http.MethodPost,
		Pattern:              "/goals",
		HandlerFuncGenerator: api.AddGoal,
	},

	{
		Name:                 "GetAllGoals",
		Method:               http.MethodGet,
		Pattern:              "/goals",
		HandlerFuncGenerator: api.GetAllGoals,
	},

	{
		Name:                 "DeleteGoal",
		Method:               http.MethodDelete,
		Pattern:              "/goals/:id",
		HandlerFuncGenerator: api.DeleteGoal,
	},

	{
		Name:                 "GetGoal",
		Method:               http.MethodGet,
		Pattern:              "/goals/:id",
		HandlerFuncGenerator: api.GetGoal,
	},

	{
		Name:                 "UpdateGoal",
		Method:               http.MethodPatch,
		Pattern:              "/goals/:id",
		HandlerFuncGenerator: api.UpdateGoal,
	},
}
